---
title: "Experiment 2 - choice analysis"
author: 
  - name: "Zhang Chen"
    orcid: 0000-0002-3500-9182
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    code-fold: true
    code-tools: true
editor: visual
execute: 
  warning: false
  error: false
toc: true
toc-depth: 3
---

In this set of analyses, I focus on the choices participants made in the Vancouver Gambling task.

## Load libraries and data

```{r}
# load libraries
library(MASS)
library(Rmisc)
library(afex)
library(tidyverse)
library(ggpubr)

library(extraDistr)
library(loo)
library(bridgesampling)
library(brms)
library(cmdstanr)
library(bayesplot)
library(bayestestR)
library(tidybayes)
library(sjPlot)

# parallelize the chains using all the cores
options(mc.cores = parallel::detectCores())

# set the theme for all ggplot2 figures
theme_set(theme_bw() +
            theme(legend.position = "top",
                  legend.direction = "horizontal"))

# create a folder for saving brms fits
if(!dir.exists("brms-fits")){
  dir.create("brms-fits")
}

# load the cleaned data
df_main <- read_csv("../../../data/processed/df_main_exp2.csv")
```

## Choices

### Catch trials

In this experiment, I included two types of catch trials, either the high-probability option or the low-probability option has a much higher expected value than the other. Here I plot how often participants chose the higher EV option for these two types of catch trials (@fig-catch-choice).

```{r}
#| label: fig-catch-choice
#| fig-cap: The proportion of choosing the high EV option on the catch trials when the high-probability option (top) or the low-probability option (bottom) has a higher EV.
#| fig-width: 7
#| fig-height: 5 

# catch trials
df_catch_choices <- df_main %>%
  filter(trial_type == "catch") %>%
  group_by(subject_ID, high_EV_option) %>%
  summarize(
    # the total number of trials, should be 12 for all participants
    n_total = n(),
    # the number of trials on which people chose the high EV option
    n_high_EV =  sum(choose_high_EV == "yes"),
    # the proportion of choosing the high EV option
    prop_high_EV = n_high_EV / n_total* 100
  ) %>%
  ungroup()

# plot the choices on the catch trials
ggplot(df_catch_choices, aes(subject_ID, prop_high_EV)) +
  geom_line(aes(group = 1), color = "gray") +
  geom_point() +
  labs(x = "Participant", 
       y = "The proportion of choosing high EV options") +
  facet_wrap(~high_EV_option, ncol = 1)

# compute some descriptives
catch_choices_descriptive <- df_catch_choices %>%
  group_by(high_EV_option) %>%
  summarize(
    mean = mean(n_high_EV),
    sd = sd(n_high_EV),
    min = min(n_high_EV),
    max = max(n_high_EV)
  )
```

When the high-prob option has a higher EV, participants overall chose the high-prob option frequently. There are three participants for whom the proportion of choosing the high-prob option is \<= 75%. When the low-prob option has a higher EV, there is much more variation in how often people chose the low-prob option. The majority of the participants still chose the low-prob option more than half of the time though. For only 4 participants, the proportion of choosing the low-prob option is \<= 50%.

### Experimental trials

#### EV ratios

In this analysis, I use the EV ratio between two options, the outcome of game 1 (loss = 0.5, win = -0.5) and whether there was a pause or not (yes = 0.5, no = -0.5) and their interactions as predictors to predict whether participants chose the HP option or not on each trial. I use the maximum random structure by including both random intercept and all random slopes per participant.

```{r}
# find the participants that need to be excluded
high_prob_cutoff <- 9
low_prob_cutoff <- 1

subject_exclude1 <- df_catch_choices %>%
  filter(
    high_EV_option == "HP",
    n_high_EV < high_prob_cutoff
    ) %>% .$subject_ID

subject_exclude2 <- df_catch_choices %>%
  filter(
    high_EV_option == "LP",
    n_high_EV < low_prob_cutoff
    ) %>% .$subject_ID

df_exp_selected <- df_main %>%
  filter(
    !subject_ID %in% subject_exclude1,
    !subject_ID %in% subject_exclude2,
    trial_type == "exp"
  )

# fit a brms model - go for the maximum random structure
brms_file_name <- 
  paste("brms-fits/fit_exp_HP", 
        high_prob_cutoff, "LP", low_prob_cutoff, sep = "_")

fit_exp <- brm(
  game2_choose_HP ~ EV_ratio * game1_outcome_num * delay_num +
    (EV_ratio * game1_outcome_num * delay_num|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_exp_selected,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  seed = 1234,
  file = brms_file_name,
  backend = "cmdstanr"
)

# save the data for later analysis
write_csv(df_exp_selected, "../../../data/processed/df_exp_exp2.csv")

```

Some general posterior predictive checks (@fig-ppc-general).

```{r}
#| label: fig-ppc-general
#| fig-cap: General posterior predictive checks.
#| fig-subcap: 
#| - "As a function of delay"
#| - "As a function of game 1 outcome"
#| - "As a function of EV ratio"
#| layout: [[1, 1], [1]]
#| fig-width: 8
#| fig-height: 8


# model diagnostics
# check the trace plot, looks good.
# plot(fit_exp)

# posterior predictive checks
yrep <- posterior_predict(fit_exp)

ppc_bars_grouped(df_exp_selected$game2_choose_HP, yrep, 
                 df_exp_selected$delay, prob = 0.95, freq = FALSE)

ppc_bars_grouped(df_exp_selected$game2_choose_HP, yrep, 
                 df_exp_selected$game1_outcome, prob = 0.95, freq = FALSE)

ppc_bars_grouped(df_exp_selected$game2_choose_HP, yrep, 
                 df_exp_selected$EV_ratio, prob = 0.95, freq = FALSE)
```

Make a plot to show the effects of EV ratio and delay.

```{r}
#| label: fig-EV-ratio-delay
#| fig-cap: Probability of choosing the HP option as a function of EV ratio and pause.
#| fig-width: 6
#| fig-height: 6

# Here I will plot the probability of choosing the HP option
# as a function of the EV ratio and whether there was a delay or not
# EV ratio will be the x axis, and delay (yes vs. no) as two colors
# here I define a small adjustment value to the x axis (i.e. EV ratio),
# that moves all no delay condition data points a bit to the left,
# and the delay condition data points to the right, to reduce overlapping.
x_adj_amount <- 0.025

# compute the probability of choosing HP for each participant
# in each condition.
plot_raw_data <- df_exp_selected %>%
  group_by(subject_ID, EV_ratio, delay) %>%
  summarize(p_HP = mean(game2_choose_HP)) %>%
  mutate(
    # add a bit adjustment as mentioned above
    EV_ratio_adj = ifelse(delay == "yes", x_adj_amount, -x_adj_amount),
    EV_ratio_plot = EV_ratio + EV_ratio_adj
  )

# get the predicted prob of choosing HP from brms
int_conds <- list(
  EV_ratio = unique(df_exp_selected$EV_ratio),
  delay_num = c(-0.5, 0.5)
)

plot_prediction <- 
  conditional_effects(
    fit_exp, 
    "EV_ratio:delay_num",
    int_conditions = int_conds)

# turn the predictions into a tibble
plot_pred <- as_tibble(
  plot_prediction$`EV_ratio:delay_num`
  ) %>%
  mutate(
    # similarly, add a little adjustment to the EV ratio
    delay = ifelse(delay_num == 0.5, "yes", "no"),
    EV_ratio_adj = ifelse(delay == "yes", x_adj_amount, -x_adj_amount),
    EV_ratio_plot = EV_ratio + EV_ratio_adj
  )

# plot the results
EV_delay_plot <- plot_raw_data %>%
  ggplot(aes(EV_ratio_plot, p_HP, color = delay)) +
  # plot raw data per participant as transparent open circles
  # jitter the dots vertically a bit to reduce overlapping
  geom_jitter(alpha = 0.2, height = 0.05, shape = 1) +
  # connect the predicted prob of choosing HP with lines
  geom_line(data = plot_pred, 
            aes(x = EV_ratio_plot,
                y = estimate__,
                group = delay),
            alpha = 0.4) +
  # estimates as solid points
  geom_point(data = plot_pred, 
             aes(EV_ratio_plot, 
                 estimate__)) +
  # add 95% CI as error bars
  geom_errorbar(data = plot_pred,
                aes(x = EV_ratio_plot, 
                    y = estimate__,
                    ymin = lower__, 
                    ymax = upper__),
                width = 0.05) +
  labs(x = "EV ratio", 
       y = "P(Choose the HP option)",
       color = "Pause")

EV_delay_plot

# save as a png file
ggsave(filename = "../plots/EV_delay_Exp2.png", 
       EV_delay_plot,
       width = 4, height = 4)
```

Make a similar plot, but this time also take the previous outcome into account.

```{r}
# some functions to make choice plots based on posterior draws from a brms model

# plot the posterior distributions of the parameters in the choice model
plot_choice_params <- function(draws){
  
  # select variables of interest and do some formatting
  choice_plot_data <- draws %>%
    select(b_EV_ratio:`b_EV_ratio:game1_outcome_num:delay_num`) %>%
    pivot_longer(
      cols = b_EV_ratio:`b_EV_ratio:game1_outcome_num:delay_num`,
      names_to = "parameter",
      values_to = "estimate"
    ) %>%
    mutate(
      parameter = factor(
        parameter,
        levels = c("b_EV_ratio",
                   "b_game1_outcome_num",
                   "b_delay_num",
                   "b_EV_ratio:game1_outcome_num",
                   "b_EV_ratio:delay_num",
                   "b_game1_outcome_num:delay_num",
                   "b_EV_ratio:game1_outcome_num:delay_num"),
        labels = c("EV ratio",
                   "Prev outcome (loss vs. win)",
                   "Pause (yes vs. no)",
                   "EV ratio * Prev outcome",
                   "EV ratio * Pause",
                   "Prev outcome * Pause",
                   "EV ratio * Prev outcome * Pause"))
    )
  
  # compute the mean and 95% credible interval for each parameter
  # these will be added to the plot as texts
  choice_summary <- choice_plot_data %>%
    group_by(parameter) %>%
    summarize(
      mean = round(mean(estimate), 2),
      lowerCI = round(quantile(estimate, probs = 0.025), 2),
      upperCI = round(quantile(estimate, probs = 1-0.025), 2)
    ) %>%
    # create a text summary, to be added to the plot
    mutate(
      # keep trailing zeros for a bit nicer formatting,
      # see https://stackoverflow.com/questions/5458729/keeping-trailing-zeros
      mean_txt = sprintf("%.2f", mean),
      lowerCI_txt = sprintf("%.2f", lowerCI),
      upperCI_txt = sprintf("%.2f", upperCI),
      summary = paste0(mean_txt, " [", lowerCI_txt, ", ", upperCI_txt, "]")
    )
  
  # plot all the parameters
  choice_param_plot <- choice_plot_data %>%
    ggplot(aes(x = estimate, y = parameter)) +
    # add a vertical line at 0
    geom_vline(xintercept = 0, linetype = "dashed", color = "darkgray") +
    # plot the posterior distributions
    stat_halfeye(point_interval = "mean_qi") +
    # add the text summary to the plot
    geom_text(data = choice_summary,
              aes(x = mean, y = parameter, label = summary),
              nudge_y = -0.25) +
    labs(x = "Posterior estimate (log odds-ratio)", y = "") +
    scale_y_discrete(limits=rev) +
    theme(axis.text = element_text(size = 9, color = "black"),
          axis.title = element_text(size = 11))
}


# plot the predicted probabilities of choosing the HP option,
# as a function of all design factors (previous outcome, pause and EV ratio)
plot_choice <- function(draws){
  
  # a data frame that contains all possible levels in the factors
  df_design <- list(
    EV_ratio = c(-0.9090909, -0.7272727, -0.5000000, -0.2500000, -0.1052632,
                 0.1818182, 0.4347826, 0.5454545, 0.6666667, 0.9090909),
    # include 0 as that allows us to see the main effect of the other variable
    game1_outcome_num = c(-0.5, 0, 0.5),
    delay_num = c(-0.5, 0, 0.5)
  ) %>%
    cross_df()
  
  # compute the predicted probability of choosing the HP option,
  # given each level of previous outcome, pause and EV ratio
  draws_overall <- tibble() # an empty data frame to save the results
  
  # iterate through the rows of the design data frame
  # and compute the predicted probability for each posterior draw
  for (row in 1:nrow(df_design)){
    
    # get the factor level for the current row
    EV_ratio_tmp <- df_design[row, ]$EV_ratio
    outcome_tmp <- df_design[row, ]$game1_outcome_num
    delay_tmp <- df_design[row, ]$delay_num
    
    # compute the predicted probability of choosing HP for each draw
    draws_tmp <- draws %>%
      mutate(
        # compute the log odds-ratio
        log_OR = b_Intercept + 
                 b_EV_ratio * EV_ratio_tmp +
                 b_game1_outcome_num * outcome_tmp +
                 b_delay_num * delay_tmp +
                 `b_EV_ratio:game1_outcome_num` * EV_ratio_tmp * outcome_tmp +
                 `b_EV_ratio:delay_num` * EV_ratio_tmp * delay_tmp +
                 `b_game1_outcome_num:delay_num` * outcome_tmp * delay_tmp +
                 `b_EV_ratio:game1_outcome_num:delay_num` * EV_ratio_tmp * outcome_tmp * delay_tmp,
        # convert log odds-ratio into probability
        prob = exp(log_OR)/(1 + exp(log_OR)),
        # add the factor levels for the current row
        EV_ratio = EV_ratio_tmp,
        # recode numeric variables into different levels
        Pause = ifelse(delay_tmp == 0.5, "yes",
                       ifelse(delay_tmp == -0.5, "no", "combined")),
        Prev_outcome = ifelse(outcome_tmp == 0.5, "loss",
                              ifelse(outcome_tmp == -0.5, "win", "combined"))
      )
    
    # add the results of the current row to the overall data frame
    draws_overall <- bind_rows(draws_overall, draws_tmp)
  }
  
  
  # compute the mean probability in each cell, plus the 95% CI
  choice_summary <- draws_overall %>%
    group_by(Prev_outcome, Pause, EV_ratio) %>%
    summarize(
      mean = mean(prob),
      lowerCI = quantile(prob, probs = 0.025),
      upperCI = quantile(prob, probs = 1-0.025)
    ) %>%
    # add a little bit jitter to the horizontal location,
    # depending on the condition of pause
    mutate(
      cond = paste(Prev_outcome, Pause, sep = "_"),
      adj = recode(Pause, "no" = -0.025, "yes" = 0.025, "combined" = 0),
      EV_ratio_adj = EV_ratio + adj
    )
  
  choice_plot <- choice_summary %>%
    filter(Pause != "combined", Prev_outcome != "combined") %>%
    ggplot(aes(EV_ratio_adj, mean, color = Pause)) +
    geom_point() +
    geom_errorbar(aes(ymin = lowerCI, ymax = upperCI), width = 0.04) +
    geom_line(aes(group = Pause), alpha = 0.5) +
    labs(x = "Expected value ratio", y = "P(Choose the HP)", color = "Pause") +
    scale_y_continuous(labels = scales::percent) +
    facet_wrap(~Prev_outcome, ncol = 2)
  
  # turn the overall draws data frame into a wide format,
  # for plotting differences between conditions later on
  draws_overall_wide <- draws_overall %>%
    pivot_wider(
      id_cols = c(.chain, .draw, EV_ratio),
      names_from = c(Prev_outcome, Pause),
      values_from = prob
    ) %>%
    # compute some simple effects
    mutate(
      win_pause_nopause = win_yes - win_no,
      loss_pause_nopause = loss_yes - loss_no,
      pause_loss_win = loss_yes - win_yes,
      nopause_loss_win = loss_no - win_no
    )
  
  # compute summaries of the simple effects
  effs_summary <- draws_overall_wide %>%
    select(EV_ratio, win_pause_nopause:nopause_loss_win) %>%
    pivot_longer(
      cols = win_pause_nopause:nopause_loss_win,
      names_to = "effect",
      values_to = "diff"
    ) %>%
    # compute the mean and 95%CI in each cell
    group_by(EV_ratio, effect) %>%
    summarize(
      mean = mean(diff),
      lowerCI = quantile(diff, probs = 0.025),
      upperCI = quantile(diff, probs = 1 - 0.025)
    )
  
  # plot the difference between pause versus no pause,
  # for after a loss and after a win separately.
  simple_pause_plot <- effs_summary %>%
    filter(effect %in% c("win_pause_nopause", "loss_pause_nopause")) %>%
    mutate(
      Prev_outcome = factor(effect, 
                            levels = c("loss_pause_nopause", "win_pause_nopause"),
                            labels = c("Loss", "Win")),
      # add a little bit horizontal jitter, for the plotting
      adj = ifelse(Prev_outcome == "Loss", -0.018, 0.018),
      EV_ratio_adj = EV_ratio + adj
    ) %>%
    ggplot(aes(x = EV_ratio_adj, y = mean, color = Prev_outcome)) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "darkgray") +
    geom_line(aes(group = Prev_outcome), alpha = 0.5) +
    geom_point() +
    geom_errorbar(aes(y = mean, ymin = lowerCI, ymax = upperCI),
                  width = 0) +
    labs(x = "Expected value ratio", y = "Pause - No Pause", color = "Previous outcome") +
    scale_y_continuous(labels = scales::percent)
  
  # plot the difference between loss versus win,
  # for after a pause and after no pause separately.
  simple_outcome_plot <- effs_summary %>%
    filter(effect %in% c("pause_loss_win", "nopause_loss_win")) %>%
    mutate(
      Pause = factor(effect, 
                     levels = c("pause_loss_win", "nopause_loss_win"),
                     labels = c("Yes", "No")),
      # add a little bit horizontal jitter, for the plotting
      adj = ifelse(Pause == "Yes", -0.018, 0.018),
      EV_ratio_adj = EV_ratio + adj
    ) %>%
    ggplot(aes(x = EV_ratio_adj, y = mean, color = Pause)) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "darkgray") +
    geom_line(aes(group = Pause), alpha = 0.5) +
    geom_point() +
    geom_errorbar(aes(y = mean, ymin = lowerCI, ymax = upperCI),
                  width = 0) +
    labs(x = "Expected value ratio", y = "Loss - Win", color = "Pause") +
    scale_y_continuous(labels = scales::percent)
  
  return(list(p1 = choice_plot, p2 = simple_pause_plot,
              p3 = simple_outcome_plot))
    
}
```

```{r}
#| label: fig-EV-ratio-delay-outcome
#| fig-cap: Probability of choosing the HP option as a function of EV ratio, pause, and previous outcome.
#| fig-width: 7
#| fig-height: 5

# select parameters of interest
var_selected <- get_variables(fit_exp)[1:8]

# get posterior draws for these parameters
draws <- fit_exp %>% as_draws_df(variable = var_selected) 

choice_params_plot <- plot_choice_params(draws)

choice_plots <- plot_choice(draws)

choice_pause_outcome_plot <- choice_plots$p1

choice_pause_outcome_plot

# save the plot as an RDS file, will be combined with plots from other exps
saveRDS(choice_pause_outcome_plot, "../plots/choice_plot_exp2.rds")
```

```{r, results='asis'}
tab_model(fit_exp)
```


#### Exploratory analysis

Here I conduct an exploratory analysis as suggested by a reviewer, in which I incorporate the outcome of a previous choice game as an additional predictor.

```{r}
# add the outcome from the previous choice game as a predictor
df_exp_explore <- df_exp_selected %>%
  arrange(subject_ID, block_number, trial_number) %>%
  group_by(subject_ID, block_number) %>%
  mutate(prev_game2_outcome = lag(game2_outcome)) %>%
  # exclude the first trial of each block,
  # since it is not proceeded by another choice game
  filter(!is.na(prev_game2_outcome)) %>%
  mutate(prev_game2_outcome = factor(prev_game2_outcome, levels = c("win", "no-win")))

contrasts(df_exp_explore$prev_game2_outcome) <- c(-0.5, 0.5)

fit_exp_explore <- brm(
  game2_choose_HP ~ EV_ratio * game1_outcome_num * delay_num * prev_game2_outcome+
    (EV_ratio * game1_outcome_num * delay_num * prev_game2_outcome|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_exp_explore,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  silent = 0,
  seed = 1234,
  file = "brms-fits/fit_exp_explore",
  backend = "cmdstanr"
)
```


```{r, results='asis'}
tab_model(fit_exp_explore)
```

### High EV choices

In this exploratory analysis, I analyze the probability of choosing the high EV option as a function of previous outcome, pause, and whether the high EV option was a HP or a LP option.

```{r}
df_exp_selected <- df_exp_selected %>%
  mutate(
    high_EV_option_num = ifelse(high_EV_option == "HP", 0.5, -0.5),
    choose_high_EV_num = ifelse(choose_high_EV == "yes", 1, 0)
  )

fit_high_EV <- brm(
  choose_high_EV_num ~ game1_outcome_num * delay_num * high_EV_option_num +
    (game1_outcome_num * delay_num * high_EV_option_num|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_exp_selected,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  seed = 1234,
  file = "brms-fits/fit_high_EV",
  backend = "cmdstanr"
  # , control = list(adapt_delta = 0.9)
)
```

```{r, results='asis'}
tab_model(fit_high_EV)
```


#### Exploratory analysis

Here I again add the outcome of a previous game2 outcome as a predictor.

```{r}
# add the outcome from the previous choice game as a predictor
df_exp_explore <- df_exp_selected %>%
  arrange(subject_ID, block_number, trial_number) %>%
  group_by(subject_ID, block_number) %>%
  mutate(prev_game2_outcome = lag(game2_outcome)) %>%
  # exclude the first trial of each block,
  # since it is not proceeded by another choice game
  filter(!is.na(prev_game2_outcome)) %>%
  mutate(prev_game2_outcome = factor(prev_game2_outcome, levels = c("win", "no-win")))

contrasts(df_exp_explore$prev_game2_outcome) <- c(-0.5, 0.5)

fit_high_EV_explore <- brm(
  choose_high_EV_num ~ game1_outcome_num * delay_num * high_EV_option_num * prev_game2_outcome +
    (game1_outcome_num * delay_num * high_EV_option_num * prev_game2_outcome|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_exp_explore,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  seed = 1234,
  silent = 0,
  file = "brms-fits/fit_high_EV_explore",
  backend = "cmdstanr"
  # , control = list(adapt_delta = 0.9)
)
```

```{r, results='asis'}
tab_model(fit_high_EV_explore)
```

### Prob and amount

```{r}
# compute the prob ratio and amount ratio between two options
df_exp_selected <- df_exp_selected %>%
  mutate(
    prob_ratio = (game2_HP_prob - game2_LP_prob)/(game2_HP_prob + game2_LP_prob) * 2,
    amount_ratio = (game2_HP_amount - game2_LP_amount)/(game2_HP_amount + game2_LP_amount) * 2
  )

# get the unique trials and compute the mean prob_ratio and amount_ratio
df_unique <- df_exp_selected %>%
  select(game2_HP_prob, game2_HP_amount, game2_LP_prob, game2_LP_amount, prob_ratio, amount_ratio) %>%
  unique()

prob_ratio_mean <- mean(df_unique$prob_ratio)
amount_ratio_mean <- mean(df_unique$amount_ratio)

# center the prob_ratio and amount_ratio predictors
df_exp_selected <- df_exp_selected %>%
  mutate(
    prob_ratio_centered = prob_ratio - prob_ratio_mean,
    amount_ratio_centered = amount_ratio - amount_ratio_mean
  )

# fit a brms model
brms_file_name <- "brms-fits/fit_prob_amount"

fit_prob_amount <- brm(
  game2_choose_HP ~ prob_ratio_centered * amount_ratio_centered *
                    game1_outcome_num * delay_num +
                    (prob_ratio_centered * amount_ratio_centered *
                    game1_outcome_num * delay_num|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_exp_selected,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  seed = 1234,
  file = brms_file_name,
  backend = "cmdstanr"
)
```

```{r}
#| label: fig-ppc-general-2
#| fig-cap: General posterior predictive checks.
#| fig-subcap: 
#| - "As a function of delay"
#| - "As a function of game 1 outcome"
#| - "As a function of EV ratio"
#| layout: [[1, 1], [1]]
#| fig-width: 8
#| fig-height: 8


# model diagnostics
# check the trace plot, looks good.
# plot(fit_prob_amount)

# posterior predictive checks
yrep <- posterior_predict(fit_prob_amount)

ppc_bars_grouped(df_exp_selected$game2_choose_HP, yrep, 
                 df_exp_selected$delay, prob = 0.95, freq = FALSE)

ppc_bars_grouped(df_exp_selected$game2_choose_HP, yrep, 
                 df_exp_selected$game1_outcome, prob = 0.95, freq = FALSE)

ppc_bars_grouped(df_exp_selected$game2_choose_HP, yrep, 
                 df_exp_selected$EV_ratio, prob = 0.95, freq = FALSE)
```

```{r}
var_selected <- get_variables(fit_prob_amount)[1:16]

draws <- fit_prob_amount %>%
  as_draws_df(variable = var_selected) %>%
  pivot_longer(cols = all_of(var_selected),
               names_to = "parameter",
               values_to = "estimate") %>%
  mutate(parameter = 
           factor(parameter, levels = var_selected,
                  labels = c("Intercept",
                             "Probability",
                             "Amount",
                             "Prev outcome (loss vs. win)",
                             "Pause (yes vs. no)",
                             "Prob * Amount",
                             "Prob * Prev outcome",
                             "Amount * Prev outcome",
                             "Prob * Pause",
                             "Amount * Pause",
                             "Prev outcome * Pause",
                             "Prob * Amount * Prev outcome",
                             "Prob * Amount * Pause",
                             "Prob * Prev outcome * Pause",
                             "Amount * Prev outcome * Pause",
                             "Prob * Amount * Prev outcome * Pause"))
  )

prob_amount_post_plot <- draws %>%
  ggplot(aes(x = estimate, y = parameter)) +
  stat_halfeye() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Posterior distribution (log odds-ratio)", y = "")+
  scale_y_discrete(limits=rev) +
  theme(axis.text = element_text(size = 10, color = "black"),
        axis.title = element_text(size = 11))

prob_amount_post_plot

# another version with only a few variables of interest
param_selected <- c("Probability", "Prob * Prev outcome",
                    "Prob * Pause", "Amount",
                    "Amount * Prev outcome", "Amount * Pause")

prob_amount_post_selected_plot <- draws %>%
  filter(parameter %in% param_selected) %>%
  mutate(parameter = factor(parameter, levels = param_selected)) %>%
  ggplot(aes(x = estimate, y = parameter)) +
  stat_halfeye() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Posterior distribution (log odds-ratio)", y = "")+
  scale_y_discrete(limits=rev) +
  theme(axis.text = element_text(size = 10, color = "black"),
        axis.title = element_text(size = 11))

# save as a png file
ggsave(filename = "../5-plots/prob_amount_Exp2.png", 
       prob_amount_post_plot,
       width = 7, height = 8)
```

```{r, results='asis'}
tab_model(fit_prob_amount)
```

Compare this model with probability and amount ratios as two separate predictors, with the model from above with only the EV ratio as the key predictor.

```{r}

# # compute the loo model fit criteria only need to run this once
# # the results are saved in the brms fit objects
# fit_exp <- add_criterion(fit_exp, "loo")
# fit_prob_amount <- add_criterion(fit_prob_amount, "loo")

loo_compare(fit_exp, fit_prob_amount, criterion = "loo")
```

#### Positive and negative EV ratios

For the choice RT, I analyzed trials with positive and negative EV ratios separately, and found diverging effects of EV ratios. Here I run a similar exploratory analysis on choices, on trials with positive and negative EV ratios separately.

```{r}
# get all trials with positive EV ratios
df_EV_pos <- df_exp_selected %>% filter(EV_ratio > 0)

# get the unique, positive EV ratios 
EV_ratio_pos <- df_EV_pos %>%
  .$EV_ratio %>% unique() %>% sort()

# compute the mean EV ratio
EV_ratio_pos_mean <- mean(EV_ratio_pos)

# center the EV ratio
df_EV_pos <- df_EV_pos %>%
  mutate(EV_ratio_c = EV_ratio - EV_ratio_pos_mean)

# fit the model
fit_EV_pos <- brm(
  game2_choose_HP ~ EV_ratio_c * game1_outcome_num * delay_num +
    (EV_ratio_c * game1_outcome_num * delay_num|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_EV_pos,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  seed = 1234,
  file = "brms-fits/fit_EV_pos",
  backend = "cmdstanr"
)
```

Do the same for trials with negative EV ratios.

```{r}
# get all trials with negative EV ratios
df_EV_neg <- df_exp_selected %>% filter(EV_ratio < 0)

# get the unique, negative EV ratios 
EV_ratio_neg <- df_EV_neg %>%
  .$EV_ratio %>% unique() %>% sort()

# compute the mean EV ratio
EV_ratio_neg_mean <- mean(EV_ratio_neg)

# center the EV ratio
df_EV_neg <- df_EV_neg %>%
  mutate(EV_ratio_c = EV_ratio - EV_ratio_neg_mean)

# fit the model
fit_EV_neg <- brm(
  game2_choose_HP ~ EV_ratio_c * game1_outcome_num * delay_num +
    (EV_ratio_c * game1_outcome_num * delay_num|subject_ID),
  family = bernoulli(link = "logit"),
  prior = 
    c(
      prior(normal(0, 2), class = Intercept),
      prior(normal(0, 1), class = b),
      prior(normal(0, 1), class = sd),
      prior(lkj(2), class = cor)
    ),
  data = df_EV_neg,
  cores = 4,
  iter = 15000,
  warmup = 5000,
  seed = 1234,
  file = "brms-fits/fit_EV_neg",
  backend = "cmdstanr"
)
```

### Robustness check

As a robustness check, each time I use a different cutoff value for the LP-optimal and the HP-optimal catch trials, and repeat the analyses above.

```{r}
high_prob_cutoffs <- df_catch_choices %>%
  filter(high_EV_option == "HP") %>%
  .$n_high_EV %>% unique()

low_prob_cutoffs <- df_catch_choices %>%
  filter(high_EV_option == "LP") %>%
  .$n_high_EV %>% unique()

# an empty tibble to hold all results
overall_summary <- tibble()

for (high_prob_cutoff in high_prob_cutoffs) {
  for (low_prob_cutoff in low_prob_cutoffs) {
    
    subject_exclude1 <- df_catch_choices %>%
      filter(
        high_EV_option == "HP",
        n_high_EV < high_prob_cutoff
      ) %>% .$subject_ID
    
    subject_exclude2 <- df_catch_choices %>%
      filter(
        high_EV_option == "LP",
        n_high_EV < low_prob_cutoff
      ) %>% .$subject_ID
    
    df_exp <- df_main %>%
      filter(
        !subject_ID %in% subject_exclude1,
        !subject_ID %in% subject_exclude2,
        trial_type == "exp"
      )
    
    # check the number of participants remaining
    n_subj <-  n_distinct(df_exp$subject_ID)
    
    # fit a brms model - go for the maximum random structure
    brms_file_name <- 
      paste("brms-fits/fit_exp_HP", 
            high_prob_cutoff, "LP", low_prob_cutoff, sep = "_")
    
    fit_HP_choice <- brm(
      game2_choose_HP ~ EV_ratio * game1_outcome_num * delay_num +
        (EV_ratio * game1_outcome_num * delay_num|subject_ID),
      family = bernoulli(link = "logit"),
      prior = 
        c(
          prior(normal(0, 2), class = Intercept),
          prior(normal(0, 1), class = b),
          prior(normal(0, 1), class = sd),
          prior(lkj(2), class = cor)
        ),
      data = df_exp,
      cores = 4,
      iter = 15000,
      warmup = 5000,
      seed = 1234,
      file = brms_file_name,
      backend = "cmdstanr"
    )
    
    # extract summary of the posterior draws
    post_summary <- 
      as_tibble(summary(fit_HP_choice)$fixed, rownames = NA) %>%
      rownames_to_column(var = "parameter") %>%
      mutate(
        n_subj = n_subj,
        HP_cutoff = high_prob_cutoff,
        LP_cutoff = low_prob_cutoff
      )
    
    # add it to the overall tibble
    overall_summary <- bind_rows(overall_summary, post_summary)
    
  }
}
```

```{r}
#| label: fig-robustness
#| fig-cap: Robustness check
#| fig-width: 6
#| fig-height: 8

# do some cleaning and reformatting of the variables
overall_summary_selected <- overall_summary %>%
  # no need to plot the Intercept, not informative
  filter(parameter != "Intercept") %>%
  mutate(
    # Re-code the labels so that it looks better
    param_label = 
      recode(parameter,
             "EV_ratio" = "EV Ratio",
             "game1_outcome_num" = "Previous Outcome",
             "delay_num" = "Pause",
             "EV_ratio:game1_outcome_num" = "EV Ratio * Previous Outcome",
             "EV_ratio:delay_num" = "EV Ratio * Pause",
             "game1_outcome_num:delay_num" = "Previous Outcome * Pause",
             "EV_ratio:game1_outcome_num:delay_num" = 
               "EV Ratio * Previous Outcome * Pause"),
    param_label = 
      factor(param_label,
             levels = c("Intercept",
                        "EV Ratio",
                        "Previous Outcome",
                        "Pause",
                        "EV Ratio * Previous Outcome",
                        "EV Ratio * Pause",
                        "Previous Outcome * Pause",
                        "EV Ratio * Previous Outcome * Pause")),
    # rename variables
    CI_upper = `u-95% CI`,
    CI_lower = `l-95% CI`
  )

# plot the posterior distributions from all models
robustness_plot <- overall_summary_selected %>%
  mutate(
    LP_cutoff = as.factor(LP_cutoff),
    HP_cutoff = as.factor(HP_cutoff)
  ) %>%
  ggplot(aes(LP_cutoff, Estimate, color = HP_cutoff)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_point(position = position_dodge(width = 0.4)) +
  geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper),
                width = 0.2, position = position_dodge(width = 0.4)) +
  facet_wrap(~param_label, ncol = 1, scales = "free_y") +
  labs(x = "Number of LP choices on LP-optimal trials",
       y = "Estimate (log odds-ratio)",
       color = "Number of HP choices on HP-optimal trials") 

robustness_plot

ggsave("../5-plots/robustness_Exp2.png", robustness_plot,
       width = 7, height = 9)

# generate a table for the number of participants left
# after applying each inclusion criterion
subj_count <- overall_summary %>%
  filter(parameter == "Intercept") %>%
  select(HP_cutoff, LP_cutoff, n_subj) %>%
  arrange(HP_cutoff, LP_cutoff) %>%
  # turn into the wide format
  pivot_wider(id_cols = HP_cutoff,
              names_from = LP_cutoff,
              values_from = n_subj)
```
